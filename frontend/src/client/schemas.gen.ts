// This file is auto-generated by @hey-api/openapi-ts

export const $Body_login_login_access_token = {
    properties: {
        grant_type: {
            anyOf: [
                {
                    type: 'string',
                    pattern: 'password'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grant Type'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        scope: {
            type: 'string',
            title: 'Scope',
            default: ''
        },
        client_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Id'
        },
        client_secret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Secret'
        }
    },
    type: 'object',
    required: ['username', 'password'],
    title: 'Body_login-login_access_token'
} as const;

export const $HTTPValidationError = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const $Response = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success',
            default: true
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        },
        data: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    items: {},
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Data',
            default: {}
        }
    },
    type: 'object',
    title: 'Response'
} as const;

export const $ScrapingSettingCreate = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        save_metadata: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Save Metadata',
            default: false
        },
        scraping_sites: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Scraping Sites'
        },
        location_rule: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Location Rule'
        },
        naming_rule: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Naming Rule'
        },
        max_title_len: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Max Title Len'
        }
    },
    type: 'object',
    required: ['name', 'description'],
    title: 'ScrapingSettingCreate'
} as const;

export const $ScrapingSettingPublic = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        save_metadata: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Save Metadata',
            default: false
        },
        scraping_sites: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Scraping Sites'
        },
        location_rule: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Location Rule'
        },
        naming_rule: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Naming Rule'
        },
        max_title_len: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Max Title Len'
        },
        id: {
            type: 'integer',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['name', 'description', 'id'],
    title: 'ScrapingSettingPublic',
    description: 'Properties to return via API, id is always required'
} as const;

export const $ScrapingSettingsPublic = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/ScrapingSettingPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'ScrapingSettingsPublic'
} as const;

export const $Token = {
    properties: {
        access_token: {
            type: 'string',
            title: 'Access Token'
        },
        token_type: {
            type: 'string',
            title: 'Token Type',
            default: 'bearer'
        }
    },
    type: 'object',
    required: ['access_token'],
    title: 'Token'
} as const;

export const $TransferTaskCreate = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        task_type: {
            type: 'integer',
            title: 'Task Type',
            default: 1
        },
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: true
        },
        auto_watch: {
            type: 'boolean',
            title: 'Auto Watch',
            default: false
        },
        transfer_type: {
            type: 'integer',
            title: 'Transfer Type',
            default: 1
        },
        source_folder: {
            type: 'string',
            title: 'Source Folder'
        },
        output_folder: {
            type: 'string',
            title: 'Output Folder'
        },
        failed_folder: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Failed Folder'
        },
        escape_folder: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Escape Folder'
        },
        escape_literals: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Escape Literals'
        },
        escape_size: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Escape Size',
            default: 1
        },
        threads_num: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Threads Num',
            default: 1
        },
        sc_enabled: {
            type: 'boolean',
            title: 'Sc Enabled',
            default: false
        },
        sc_id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sc Id'
        },
        scraping_sites: {
            type: 'string',
            title: 'Scraping Sites'
        },
        location_rule: {
            type: 'string',
            title: 'Location Rule'
        },
        naming_rule: {
            type: 'string',
            title: 'Naming Rule'
        },
        max_title_len: {
            type: 'string',
            title: 'Max Title Len'
        }
    },
    type: 'object',
    required: ['name', 'description', 'source_folder', 'output_folder', 'scraping_sites', 'location_rule', 'naming_rule', 'max_title_len'],
    title: 'TransferTaskCreate'
} as const;

export const $TransferTaskPublic = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        task_type: {
            type: 'integer',
            title: 'Task Type',
            default: 1
        },
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: true
        },
        auto_watch: {
            type: 'boolean',
            title: 'Auto Watch',
            default: false
        },
        transfer_type: {
            type: 'integer',
            title: 'Transfer Type',
            default: 1
        },
        source_folder: {
            type: 'string',
            title: 'Source Folder'
        },
        output_folder: {
            type: 'string',
            title: 'Output Folder'
        },
        failed_folder: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Failed Folder'
        },
        escape_folder: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Escape Folder'
        },
        escape_literals: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Escape Literals'
        },
        escape_size: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Escape Size',
            default: 1
        },
        threads_num: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Threads Num',
            default: 1
        },
        sc_enabled: {
            type: 'boolean',
            title: 'Sc Enabled',
            default: false
        },
        sc_id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sc Id'
        },
        id: {
            type: 'integer',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['name', 'description', 'source_folder', 'output_folder', 'id'],
    title: 'TransferTaskPublic',
    description: 'Properties to return via API, id is always required'
} as const;

export const $TransferTasksPublic = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/TransferTaskPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'TransferTasksPublic'
} as const;

export const $UpdatePassword = {
    properties: {
        current_password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'Current Password'
        },
        new_password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'New Password'
        }
    },
    type: 'object',
    required: ['current_password', 'new_password'],
    title: 'UpdatePassword'
} as const;

export const $UserCreate = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email',
            index: true,
            unique: true
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'Password'
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'UserCreate'
} as const;

export const $UserPublic = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email',
            index: true,
            unique: true
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        id: {
            type: 'integer',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['email', 'id'],
    title: 'UserPublic'
} as const;

export const $UserRegister = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email'
        },
        password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'Password'
        },
        name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'UserRegister'
} as const;

export const $UserUpdate = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        email: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        password: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 40,
                    minLength: 8
                },
                {
                    type: 'null'
                }
            ],
            title: 'Password'
        }
    },
    type: 'object',
    title: 'UserUpdate'
} as const;

export const $UserUpdateMe = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        email: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        }
    },
    type: 'object',
    title: 'UserUpdateMe'
} as const;

export const $UsersPublic = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/UserPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'UsersPublic'
} as const;

export const $ValidationError = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;