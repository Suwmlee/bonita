// This file is auto-generated by @hey-api/openapi-ts

export const $Body_login_login_access_token = {
    properties: {
        grant_type: {
            anyOf: [
                {
                    type: 'string',
                    pattern: 'password'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grant Type'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        scope: {
            type: 'string',
            title: 'Scope',
            default: ''
        },
        client_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Id'
        },
        client_secret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Secret'
        }
    },
    type: 'object',
    required: ['username', 'password'],
    title: 'Body_login-login_access_token'
} as const;

export const $Body_resource_upload_image = {
    properties: {
        file: {
            type: 'string',
            format: 'binary',
            title: 'File'
        }
    },
    type: 'object',
    required: ['file'],
    title: 'Body_resource-upload_image'
} as const;

export const $EmbySettings = {
    properties: {
        emby_host: {
            type: 'string',
            title: 'Emby Host'
        },
        emby_apikey: {
            type: 'string',
            title: 'Emby Apikey'
        }
    },
    type: 'object',
    required: ['emby_host', 'emby_apikey'],
    title: 'EmbySettings',
    description: 'Emby settings schema'
} as const;

export const $ExtraInfoPublic = {
    properties: {
        filepath: {
            type: 'string',
            title: 'Filepath'
        },
        number: {
            type: 'string',
            title: 'Number'
        },
        tag: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tag'
        },
        partNumber: {
            type: 'integer',
            title: 'Partnumber'
        },
        specifiedsource: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Specifiedsource'
        },
        specifiedurl: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Specifiedurl'
        },
        id: {
            type: 'integer',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['filepath', 'number', 'partNumber', 'id'],
    title: 'ExtraInfoPublic'
} as const;

export const $HTTPValidationError = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const $MetadataBase = {
    properties: {
        number: {
            type: 'string',
            title: 'Number'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        studio: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Studio'
        },
        release: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Release'
        },
        year: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Year'
        },
        runtime: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Runtime'
        },
        genre: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Genre'
        },
        rating: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Rating'
        },
        language: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Language'
        },
        country: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Country'
        },
        outline: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Outline'
        },
        director: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Director'
        },
        actor: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Actor'
        },
        actor_photo: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Actor Photo'
        },
        cover: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Cover'
        },
        cover_small: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Cover Small'
        },
        extrafanart: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Extrafanart'
        },
        trailer: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Trailer'
        },
        tag: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tag'
        },
        label: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Label'
        },
        series: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Series'
        },
        userrating: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Userrating'
        },
        uservotes: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Uservotes'
        },
        detailurl: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Detailurl'
        },
        site: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Site'
        }
    },
    type: 'object',
    required: ['number', 'title'],
    title: 'MetadataBase'
} as const;

export const $MetadataCollection = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/MetadataPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'MetadataCollection'
} as const;

export const $MetadataPublic = {
    properties: {
        number: {
            type: 'string',
            title: 'Number'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        studio: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Studio'
        },
        release: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Release'
        },
        year: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Year'
        },
        runtime: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Runtime'
        },
        genre: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Genre'
        },
        rating: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Rating'
        },
        language: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Language'
        },
        country: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Country'
        },
        outline: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Outline'
        },
        director: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Director'
        },
        actor: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Actor'
        },
        actor_photo: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Actor Photo'
        },
        cover: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Cover'
        },
        cover_small: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Cover Small'
        },
        extrafanart: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Extrafanart'
        },
        trailer: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Trailer'
        },
        tag: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tag'
        },
        label: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Label'
        },
        series: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Series'
        },
        userrating: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Userrating'
        },
        uservotes: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Uservotes'
        },
        detailurl: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Detailurl'
        },
        site: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Site'
        },
        id: {
            type: 'integer',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['number', 'title', 'id'],
    title: 'MetadataPublic'
} as const;

export const $OperationMethod = {
    type: 'integer',
    enum: [1, 2, 3, 4],
    title: 'OperationMethod',
    description: `操作类型: 1. 硬链接 2. 软链接 3. 移动 4. 复制
    `
} as const;

export const $ProxySettings = {
    properties: {
        http: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Http'
        },
        https: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Https'
        },
        enabled: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Enabled',
            default: false
        }
    },
    type: 'object',
    title: 'ProxySettings',
    description: 'Proxy settings schema'
} as const;

export const $RecordPublic = {
    properties: {
        transfer_record: {
            '$ref': '#/components/schemas/TransferRecordPublic'
        },
        extra_info: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ExtraInfoPublic'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['transfer_record'],
    title: 'RecordPublic'
} as const;

export const $RecordsPublic = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/RecordPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'RecordsPublic'
} as const;

export const $Response = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success',
            default: true
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        },
        data: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    items: {},
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Data',
            default: {}
        }
    },
    type: 'object',
    title: 'Response'
} as const;

export const $ScrapingConfigCreate = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        save_metadata: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Save Metadata',
            default: false
        },
        scraping_sites: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Scraping Sites'
        },
        location_rule: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Location Rule'
        },
        naming_rule: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Naming Rule'
        },
        max_title_len: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Max Title Len'
        },
        morestoryline: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Morestoryline',
            default: true
        },
        extrafanart_enabled: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Extrafanart Enabled',
            default: false
        },
        extrafanart_folder: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Extrafanart Folder',
            default: 'extrafanart'
        },
        watermark_enabled: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Watermark Enabled',
            default: true
        },
        watermark_size: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Watermark Size',
            default: 9
        },
        watermark_location: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Watermark Location',
            default: 2
        },
        transalte_enabled: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Transalte Enabled',
            default: false
        },
        transalte_to_sc: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Transalte To Sc',
            default: false
        },
        transalte_values: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Transalte Values',
            default: 'title,outline'
        }
    },
    type: 'object',
    required: ['name', 'description'],
    title: 'ScrapingConfigCreate'
} as const;

export const $ScrapingConfigPublic = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        save_metadata: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Save Metadata',
            default: false
        },
        scraping_sites: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Scraping Sites'
        },
        location_rule: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Location Rule'
        },
        naming_rule: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Naming Rule'
        },
        max_title_len: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Max Title Len'
        },
        morestoryline: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Morestoryline',
            default: true
        },
        extrafanart_enabled: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Extrafanart Enabled',
            default: false
        },
        extrafanart_folder: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Extrafanart Folder',
            default: 'extrafanart'
        },
        watermark_enabled: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Watermark Enabled',
            default: true
        },
        watermark_size: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Watermark Size',
            default: 9
        },
        watermark_location: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Watermark Location',
            default: 2
        },
        transalte_enabled: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Transalte Enabled',
            default: false
        },
        transalte_to_sc: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Transalte To Sc',
            default: false
        },
        transalte_values: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Transalte Values',
            default: 'title,outline'
        },
        id: {
            type: 'integer',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['name', 'description', 'id'],
    title: 'ScrapingConfigPublic',
    description: 'Properties to return via API, id is always required'
} as const;

export const $ScrapingConfigsPublic = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/ScrapingConfigPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'ScrapingConfigsPublic'
} as const;

export const $TaskPathParam = {
    properties: {
        path: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Path'
        }
    },
    type: 'object',
    title: 'TaskPathParam'
} as const;

export const $TaskStatus = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        transfer_config: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Transfer Config'
        },
        scraping_config: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Scraping Config'
        },
        status: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Status'
        },
        detail: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Detail'
        }
    },
    type: 'object',
    required: ['id'],
    title: 'TaskStatus'
} as const;

export const $Token = {
    properties: {
        access_token: {
            type: 'string',
            title: 'Access Token'
        },
        token_type: {
            type: 'string',
            title: 'Token Type',
            default: 'bearer'
        }
    },
    type: 'object',
    required: ['access_token'],
    title: 'Token'
} as const;

export const $ToolArgsParam = {
    properties: {
        arg1: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Arg1'
        },
        arg2: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Arg2'
        },
        arg3: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Arg3'
        }
    },
    type: 'object',
    title: 'ToolArgsParam',
    description: '工具参数请求'
} as const;

export const $TransferConfigCreate = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: true
        },
        content_type: {
            type: 'integer',
            title: 'Content Type',
            default: 1
        },
        operation: {
            '$ref': '#/components/schemas/OperationMethod'
        },
        auto_watch: {
            type: 'boolean',
            title: 'Auto Watch',
            default: false
        },
        clean_others: {
            type: 'boolean',
            title: 'Clean Others',
            default: false
        },
        optimize_name: {
            type: 'boolean',
            title: 'Optimize Name',
            default: false
        },
        source_folder: {
            type: 'string',
            title: 'Source Folder'
        },
        output_folder: {
            type: 'string',
            title: 'Output Folder'
        },
        failed_folder: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Failed Folder'
        },
        escape_folder: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Escape Folder'
        },
        escape_literals: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Escape Literals'
        },
        escape_size: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Escape Size',
            default: 1
        },
        threads_num: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Threads Num',
            default: 1
        },
        sc_enabled: {
            type: 'boolean',
            title: 'Sc Enabled',
            default: false
        },
        sc_id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sc Id'
        }
    },
    type: 'object',
    required: ['name', 'description', 'operation', 'source_folder', 'output_folder'],
    title: 'TransferConfigCreate'
} as const;

export const $TransferConfigPublic = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: true
        },
        content_type: {
            type: 'integer',
            title: 'Content Type',
            default: 1
        },
        operation: {
            allOf: [
                {
                    '$ref': '#/components/schemas/OperationMethod'
                }
            ],
            default: 1
        },
        auto_watch: {
            type: 'boolean',
            title: 'Auto Watch',
            default: false
        },
        clean_others: {
            type: 'boolean',
            title: 'Clean Others',
            default: false
        },
        optimize_name: {
            type: 'boolean',
            title: 'Optimize Name',
            default: false
        },
        source_folder: {
            type: 'string',
            title: 'Source Folder'
        },
        output_folder: {
            type: 'string',
            title: 'Output Folder'
        },
        failed_folder: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Failed Folder'
        },
        escape_folder: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Escape Folder'
        },
        escape_literals: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Escape Literals'
        },
        escape_size: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Escape Size',
            default: 1
        },
        threads_num: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Threads Num',
            default: 1
        },
        sc_enabled: {
            type: 'boolean',
            title: 'Sc Enabled',
            default: false
        },
        sc_id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sc Id'
        },
        id: {
            type: 'integer',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['name', 'description', 'source_folder', 'output_folder', 'id'],
    title: 'TransferConfigPublic',
    description: 'Properties to return via API, id is always required'
} as const;

export const $TransferConfigsPublic = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/TransferConfigPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'TransferConfigsPublic'
} as const;

export const $TransferRecordPublic = {
    properties: {
        srcname: {
            type: 'string',
            title: 'Srcname'
        },
        srcpath: {
            type: 'string',
            title: 'Srcpath'
        },
        srcfolder: {
            type: 'string',
            title: 'Srcfolder'
        },
        task_id: {
            type: 'integer',
            title: 'Task Id'
        },
        ignored: {
            type: 'boolean',
            title: 'Ignored',
            default: false
        },
        locked: {
            type: 'boolean',
            title: 'Locked',
            default: false
        },
        deleted: {
            type: 'boolean',
            title: 'Deleted',
            default: false
        },
        srcdeleted: {
            type: 'boolean',
            title: 'Srcdeleted',
            default: false
        },
        forced_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Forced Name'
        },
        top_folder: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Top Folder'
        },
        second_folder: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Second Folder'
        },
        isepisode: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Isepisode',
            default: false
        },
        season: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Season',
            default: -1
        },
        episode: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Episode',
            default: -1
        },
        linkpath: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Linkpath'
        },
        destpath: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Destpath'
        },
        updatetime: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updatetime'
        },
        deadtime: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deadtime'
        },
        id: {
            type: 'integer',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['srcname', 'srcpath', 'srcfolder', 'task_id', 'id'],
    title: 'TransferRecordPublic',
    description: 'Properties to return via API, id is always required'
} as const;

export const $TransferRecordsPublic = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/TransferRecordPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'TransferRecordsPublic'
} as const;

export const $UpdatePassword = {
    properties: {
        current_password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'Current Password'
        },
        new_password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'New Password'
        }
    },
    type: 'object',
    required: ['current_password', 'new_password'],
    title: 'UpdatePassword'
} as const;

export const $UserCreate = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email',
            index: true,
            unique: true
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'Password'
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'UserCreate'
} as const;

export const $UserPublic = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email',
            index: true,
            unique: true
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        id: {
            type: 'integer',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['email', 'id'],
    title: 'UserPublic'
} as const;

export const $UserRegister = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email'
        },
        password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'Password'
        },
        name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'UserRegister'
} as const;

export const $UserUpdate = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        email: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        password: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 40,
                    minLength: 8
                },
                {
                    type: 'null'
                }
            ],
            title: 'Password'
        }
    },
    type: 'object',
    title: 'UserUpdate'
} as const;

export const $UserUpdateMe = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        email: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        }
    },
    type: 'object',
    title: 'UserUpdateMe'
} as const;

export const $UsersPublic = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/UserPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'UsersPublic'
} as const;

export const $ValidationError = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;