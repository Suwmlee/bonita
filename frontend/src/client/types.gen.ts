// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_login_access_token = {
    grant_type?: string | null;
    username: string;
    password: string;
    scope?: string;
    client_id?: string | null;
    client_secret?: string | null;
};

export type Body_resource_upload_image = {
    file: (Blob | File);
};

/**
 * Emby settings schema
 */
export type EmbySettings = {
    emby_host: string;
    emby_apikey: string;
    enabled?: boolean | null;
};

export type ExtraInfoPublic = {
    filepath?: string | null;
    number?: string | null;
    tag?: string | null;
    partNumber?: number | null;
    specifiedsource?: string | null;
    specifiedurl?: string | null;
    id?: number | null;
};

/**
 * 文件或目录信息
 */
export type FileInfo = {
    name: string;
    path: string;
    is_dir: boolean;
    size?: number;
    modified_time?: string | null;
};

/**
 * 目录内文件列表响应
 */
export type FileListResponse = {
    data: Array<FileInfo>;
    current_path: string;
    parent_path?: string | null;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

/**
 * Jellyfin settings schema
 */
export type JellyfinSettings = {
    jellyfin_host: string;
    jellyfin_apikey: string;
    enabled?: boolean | null;
};

/**
 * MediaItem集合，用于分页响应
 */
export type MediaItemCollection = {
    data: Array<MediaItemInDB>;
    count: number;
};

/**
 * 创建MediaItem时的属性
 */
export type MediaItemCreate = {
    media_type: string;
    title: string;
    original_title?: string | null;
    year?: number | null;
    imdb_id?: string | null;
    tmdb_id?: string | null;
    tvdb_id?: string | null;
    douban_id?: string | null;
    number?: string | null;
    season_number?: number | null;
    episode_number?: number | null;
    poster?: string | null;
};

/**
 * 数据库中的MediaItem属性
 */
export type MediaItemInDB = {
    media_type: string;
    title: string;
    original_title?: string | null;
    year?: number | null;
    imdb_id?: string | null;
    tmdb_id?: string | null;
    tvdb_id?: string | null;
    douban_id?: string | null;
    number?: string | null;
    season_number?: number | null;
    episode_number?: number | null;
    poster?: string | null;
    id: number;
    series_id?: number | null;
    created_at: string;
    updated_at: string;
};

/**
 * 更新MediaItem时的属性
 */
export type MediaItemUpdate = {
    media_type?: string | null;
    title?: string | null;
    original_title?: string | null;
    year?: number | null;
    imdb_id?: string | null;
    tmdb_id?: string | null;
    tvdb_id?: string | null;
    douban_id?: string | null;
    number?: string | null;
    season_number?: number | null;
    episode_number?: number | null;
    poster?: string | null;
    series_id?: number | null;
};

export type MetadataBase = {
    number: string;
    title: string;
    studio?: string | null;
    release?: string | null;
    year?: number | null;
    runtime?: string | null;
    genre?: string | null;
    rating?: string | null;
    language?: string | null;
    country?: string | null;
    outline?: string | null;
    director?: string | null;
    actor?: string | null;
    actor_photo?: string | null;
    cover?: string | null;
    cover_small?: string | null;
    extrafanart?: string | null;
    trailer?: string | null;
    tag?: string | null;
    label?: string | null;
    series?: string | null;
    userrating?: number | null;
    uservotes?: number | null;
    detailurl?: string | null;
    site?: string | null;
    updatetime?: string | null;
};

export type MetadataCollection = {
    data: Array<MetadataPublic>;
    count: number;
};

/**
 * 用于创建元数据的模型
 */
export type MetadataCreate = {
    number: string;
    title: string;
    studio?: string | null;
    release?: string | null;
    year?: number | null;
    runtime?: string | null;
    genre?: string | null;
    rating?: string | null;
    language?: string | null;
    country?: string | null;
    outline?: string | null;
    director?: string | null;
    actor?: string | null;
    actor_photo?: string | null;
    cover?: string | null;
    cover_small?: string | null;
    extrafanart?: string | null;
    trailer?: string | null;
    tag?: string | null;
    label?: string | null;
    series?: string | null;
    userrating?: number | null;
    uservotes?: number | null;
    detailurl?: string | null;
    site?: string | null;
    updatetime?: string | null;
};

export type MetadataPublic = {
    number: string;
    title: string;
    studio?: string | null;
    release?: string | null;
    year?: number | null;
    runtime?: string | null;
    genre?: string | null;
    rating?: string | null;
    language?: string | null;
    country?: string | null;
    outline?: string | null;
    director?: string | null;
    actor?: string | null;
    actor_photo?: string | null;
    cover?: string | null;
    cover_small?: string | null;
    extrafanart?: string | null;
    trailer?: string | null;
    tag?: string | null;
    label?: string | null;
    series?: string | null;
    userrating?: number | null;
    uservotes?: number | null;
    detailurl?: string | null;
    site?: string | null;
    updatetime?: string | null;
    id: number;
};

/**
 * 操作类型: 1. 硬链接 2. 软链接 3. 移动 4. 复制
 *
 */
export type OperationMethod = 1 | 2 | 3 | 4;

/**
 * Proxy settings schema
 */
export type ProxySettings = {
    http?: string | null;
    https?: string | null;
    enabled?: boolean | null;
};

export type RecordPublic = {
    transfer_record: TransferRecordPublic;
    extra_info?: ExtraInfoPublic | null;
};

export type RecordsPublic = {
    data: Array<RecordPublic>;
    count: number;
};

export type Response = {
    success?: boolean;
    message?: string | null;
    data?: {
    [key: string]: unknown;
} | Array<unknown> | null;
};

export type ScrapingConfigCreate = {
    name: string;
    description: string;
    save_metadata?: boolean | null;
    scraping_sites?: string | null;
    location_rule?: string | null;
    naming_rule?: string | null;
    max_title_len?: number | null;
    morestoryline?: boolean | null;
    extrafanart_enabled?: boolean | null;
    extrafanart_folder?: string | null;
    watermark_enabled?: boolean | null;
    watermark_size?: number | null;
    watermark_location?: number | null;
    transalte_enabled?: boolean | null;
    transalte_to_sc?: boolean | null;
    transalte_values?: string | null;
};

/**
 * Properties to return via API, id is always required
 */
export type ScrapingConfigPublic = {
    name: string;
    description: string;
    save_metadata?: boolean | null;
    scraping_sites?: string | null;
    location_rule?: string | null;
    naming_rule?: string | null;
    max_title_len?: number | null;
    morestoryline?: boolean | null;
    extrafanart_enabled?: boolean | null;
    extrafanart_folder?: string | null;
    watermark_enabled?: boolean | null;
    watermark_size?: number | null;
    watermark_location?: number | null;
    transalte_enabled?: boolean | null;
    transalte_to_sc?: boolean | null;
    transalte_values?: string | null;
    id: number;
};

export type ScrapingConfigsPublic = {
    data: Array<ScrapingConfigPublic>;
    count: number;
};

export type TaskPathParam = {
    path?: string | null;
};

export type TaskStatus = {
    id: string;
    name?: string | null;
    transfer_config?: number | null;
    scraping_config?: number | null;
    status?: string | null;
    detail?: string | null;
};

export type Token = {
    access_token: string;
    token_type?: string;
};

/**
 * 工具参数请求
 */
export type ToolArgsParam = {
    arg1?: string | null;
    arg2?: string | null;
    arg3?: string | null;
};

export type TransferConfigCreate = {
    name: string;
    description: string;
    enabled?: boolean;
    content_type?: number;
    operation: OperationMethod;
    auto_watch?: boolean;
    clean_others?: boolean;
    optimize_name?: boolean;
    source_folder: string;
    output_folder: string;
    failed_folder?: string | null;
    escape_folder?: string | null;
    escape_literals?: string | null;
    escape_size?: number | null;
    threads_num?: number | null;
    sc_enabled?: boolean;
    sc_id?: number | null;
};

/**
 * Properties to return via API, id is always required
 */
export type TransferConfigPublic = {
    name: string;
    description: string;
    enabled?: boolean;
    content_type?: number;
    operation?: OperationMethod;
    auto_watch?: boolean;
    clean_others?: boolean;
    optimize_name?: boolean;
    source_folder: string;
    output_folder: string;
    failed_folder?: string | null;
    escape_folder?: string | null;
    escape_literals?: string | null;
    escape_size?: number | null;
    threads_num?: number | null;
    sc_enabled?: boolean;
    sc_id?: number | null;
    id: number;
};

export type TransferConfigsPublic = {
    data: Array<TransferConfigPublic>;
    count: number;
};

/**
 * Properties to return via API, id is always required
 */
export type TransferRecordPublic = {
    srcname: string;
    srcpath: string;
    srcfolder: string;
    task_id: number;
    ignored?: boolean;
    locked?: boolean;
    deleted?: boolean;
    srcdeleted?: boolean;
    forced_name?: string | null;
    top_folder?: string | null;
    second_folder?: string | null;
    isepisode?: boolean | null;
    season?: number | null;
    episode?: number | null;
    linkpath?: string | null;
    destpath?: string | null;
    updatetime?: string | null;
    deadtime?: string | null;
    id: number;
};

export type TransferRecordsPublic = {
    data: Array<TransferRecordPublic>;
    count: number;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    name?: string | null;
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    password: string;
};

export type UserPublic = {
    name?: string | null;
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    id: number;
};

export type UserRegister = {
    email: string;
    password: string;
    name?: string | null;
};

export type UserUpdate = {
    name?: string | null;
    email?: string | null;
    is_active?: boolean;
    is_superuser?: boolean;
    password?: string | null;
};

export type UserUpdateMe = {
    name?: string | null;
    email?: string | null;
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type LoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginAccessTokenResponse = Token;

export type ReadUsersData = {
    limit?: number;
    skip?: number;
};

export type ReadUsersResponse = UsersPublic;

export type CreateUserData = {
    requestBody: UserCreate;
};

export type CreateUserResponse = UserPublic;

export type ReadUserMeResponse = UserPublic;

export type DeleteUserMeResponse = Response;

export type UpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UpdateUserMeResponse = UserPublic;

export type UpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UpdatePasswordMeResponse = Response;

export type RegisterUserData = {
    requestBody: UserRegister;
};

export type RegisterUserResponse = UserPublic;

export type ReadUserByIdData = {
    userId: number;
};

export type ReadUserByIdResponse = UserPublic;

export type UpdateUserData = {
    requestBody: UserUpdate;
    userId: number;
};

export type UpdateUserResponse = UserPublic;

export type DeleteUserData = {
    userId: number;
};

export type DeleteUserResponse = Response;

export type RunTransferTaskData = {
    id: number;
    requestBody: TaskPathParam;
};

export type RunTransferTaskResponse = TaskStatus;

export type GetAllTasksStatusResponse = Array<TaskStatus>;

export type GetAllTaskConfigsData = {
    limit?: number;
    skip?: number;
};

export type GetAllTaskConfigsResponse = TransferConfigsPublic;

export type CreateTaskConfigData = {
    requestBody: TransferConfigCreate;
};

export type CreateTaskConfigResponse = TransferConfigPublic;

export type UpdateTaskConfigData = {
    id: number;
    requestBody: TransferConfigPublic;
};

export type UpdateTaskConfigResponse = TransferConfigPublic;

export type DeleteTaskConfigData = {
    id: number;
};

export type DeleteTaskConfigResponse = Response;

export type GetAllConfigsData = {
    limit?: number;
    skip?: number;
};

export type GetAllConfigsResponse = ScrapingConfigsPublic;

export type CreateConfigData = {
    requestBody: ScrapingConfigCreate;
};

export type CreateConfigResponse = ScrapingConfigPublic;

export type UpdateConfigData = {
    id: number;
    requestBody: ScrapingConfigPublic;
};

export type UpdateConfigResponse = ScrapingConfigPublic;

export type DeleteConfigData = {
    id: number;
};

export type DeleteConfigResponse = Response;

export type GetRecordsData = {
    limit?: number;
    search?: string;
    skip?: number;
    sortBy?: string;
    sortDesc?: boolean;
    taskId?: number;
};

export type GetRecordsResponse = RecordsPublic;

export type UpdateRecordData = {
    requestBody: RecordPublic;
};

export type UpdateRecordResponse = RecordPublic;

export type UpdateTopFolderData = {
    newTopFolder: string;
    oldTopFolder: string;
    srcfolder: string;
};

export type UpdateTopFolderResponse = Response;

export type DeleteRecordsData = {
    force?: boolean;
    requestBody: Array<(number)>;
};

export type DeleteRecordsResponse = Response;

export type GetTransRecordsData = {
    limit?: number;
    skip?: number;
};

export type GetTransRecordsResponse = TransferRecordsPublic;

export type CreateMetadataData = {
    requestBody: MetadataCreate;
};

export type CreateMetadataResponse = MetadataPublic;

export type GetMetadataData = {
    filter?: string;
    limit?: number;
    skip?: number;
    sortBy?: string;
    sortDesc?: boolean;
};

export type GetMetadataResponse = MetadataCollection;

export type UpdateMetadataData = {
    id: number;
    requestBody: MetadataBase;
};

export type UpdateMetadataResponse = MetadataPublic;

export type DeleteMetadataData = {
    id: number;
};

export type DeleteMetadataResponse = Response;

export type GetMediaItemsData = {
    limit?: number;
    mediaType?: string;
    search?: string;
    skip?: number;
    sortBy?: string;
    sortDesc?: boolean;
};

export type GetMediaItemsResponse = MediaItemCollection;

export type CreateMediaItemData = {
    requestBody: MediaItemCreate;
};

export type CreateMediaItemResponse = MediaItemInDB;

export type GetWatchedMediaItemsData = {
    limit?: number;
    skip?: number;
    sortBy?: string;
    sortDesc?: boolean;
    source?: string;
};

export type GetWatchedMediaItemsResponse = MediaItemCollection;

export type GetMediaItemData = {
    mediaId: number;
};

export type GetMediaItemResponse = MediaItemInDB;

export type UpdateMediaItemData = {
    mediaId: number;
    requestBody: MediaItemUpdate;
};

export type UpdateMediaItemResponse = MediaItemInDB;

export type DeleteMediaItemData = {
    mediaId: number;
};

export type DeleteMediaItemResponse = unknown;

export type RunImportNfoData = {
    requestBody: ToolArgsParam;
};

export type RunImportNfoResponse = TaskStatus;

export type RunEmbyScanData = {
    requestBody: ToolArgsParam;
};

export type RunEmbyScanResponse = TaskStatus;

export type GetProxySettingsResponse = ProxySettings;

export type UpdateProxySettingsData = {
    requestBody: ProxySettings;
};

export type UpdateProxySettingsResponse = Response;

export type GetEmbySettingsResponse = EmbySettings;

export type UpdateEmbySettingsData = {
    requestBody: EmbySettings;
};

export type UpdateEmbySettingsResponse = Response;

export type TestEmbyConnectionData = {
    requestBody: EmbySettings;
};

export type TestEmbyConnectionResponse = Response;

export type GetJellyfinSettingsResponse = JellyfinSettings;

export type UpdateJellyfinSettingsData = {
    requestBody: JellyfinSettings;
};

export type UpdateJellyfinSettingsResponse = Response;

export type TestJellyfinConnectionData = {
    requestBody: JellyfinSettings;
};

export type TestJellyfinConnectionResponse = Response;

export type GetImageByQueryData = {
    path: string;
};

export type GetImageByQueryResponse = unknown;

export type UploadImageData = {
    customUrl?: string;
    formData: Body_resource_upload_image;
};

export type UploadImageResponse = unknown;

export type ListDirectoryData = {
    /**
     * 要浏览的目录路径
     */
    directoryPath?: string;
};

export type ListDirectoryResponse = FileListResponse;

export type $OpenApiTs = {
    '/api/v1/login/access-token': {
        post: {
            req: LoginAccessTokenData;
            res: {
                /**
                 * Successful Response
                 */
                200: Token;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/users/': {
        get: {
            req: ReadUsersData;
            res: {
                /**
                 * Successful Response
                 */
                200: UsersPublic;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        post: {
            req: CreateUserData;
            res: {
                /**
                 * Successful Response
                 */
                200: UserPublic;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/users/me': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: UserPublic;
            };
        };
        delete: {
            res: {
                /**
                 * Successful Response
                 */
                200: Response;
            };
        };
        patch: {
            req: UpdateUserMeData;
            res: {
                /**
                 * Successful Response
                 */
                200: UserPublic;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/users/me/password': {
        patch: {
            req: UpdatePasswordMeData;
            res: {
                /**
                 * Successful Response
                 */
                200: Response;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/users/signup': {
        post: {
            req: RegisterUserData;
            res: {
                /**
                 * Successful Response
                 */
                200: UserPublic;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/users/{user_id}': {
        get: {
            req: ReadUserByIdData;
            res: {
                /**
                 * Successful Response
                 */
                200: UserPublic;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        patch: {
            req: UpdateUserData;
            res: {
                /**
                 * Successful Response
                 */
                200: UserPublic;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: DeleteUserData;
            res: {
                /**
                 * Successful Response
                 */
                200: Response;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/tasks/run/{id}': {
        post: {
            req: RunTransferTaskData;
            res: {
                /**
                 * Successful Response
                 */
                200: TaskStatus;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/tasks/status': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: Array<TaskStatus>;
            };
        };
    };
    '/api/v1/tasks/config/all': {
        get: {
            req: GetAllTaskConfigsData;
            res: {
                /**
                 * Successful Response
                 */
                200: TransferConfigsPublic;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/tasks/config/': {
        post: {
            req: CreateTaskConfigData;
            res: {
                /**
                 * Successful Response
                 */
                200: TransferConfigPublic;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/tasks/config/{id}': {
        put: {
            req: UpdateTaskConfigData;
            res: {
                /**
                 * Successful Response
                 */
                200: TransferConfigPublic;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: DeleteTaskConfigData;
            res: {
                /**
                 * Successful Response
                 */
                200: Response;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/scraping/config/all': {
        get: {
            req: GetAllConfigsData;
            res: {
                /**
                 * Successful Response
                 */
                200: ScrapingConfigsPublic;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/scraping/config/': {
        post: {
            req: CreateConfigData;
            res: {
                /**
                 * Successful Response
                 */
                200: ScrapingConfigPublic;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/scraping/config/{id}': {
        put: {
            req: UpdateConfigData;
            res: {
                /**
                 * Successful Response
                 */
                200: ScrapingConfigPublic;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: DeleteConfigData;
            res: {
                /**
                 * Successful Response
                 */
                200: Response;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/records/all': {
        get: {
            req: GetRecordsData;
            res: {
                /**
                 * Successful Response
                 */
                200: RecordsPublic;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/records/record': {
        put: {
            req: UpdateRecordData;
            res: {
                /**
                 * Successful Response
                 */
                200: RecordPublic;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/records/update-top-folder': {
        put: {
            req: UpdateTopFolderData;
            res: {
                /**
                 * Successful Response
                 */
                200: Response;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/records/records': {
        delete: {
            req: DeleteRecordsData;
            res: {
                /**
                 * Successful Response
                 */
                200: Response;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/records/transrecords': {
        get: {
            req: GetTransRecordsData;
            res: {
                /**
                 * Successful Response
                 */
                200: TransferRecordsPublic;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/metadata/': {
        post: {
            req: CreateMetadataData;
            res: {
                /**
                 * Successful Response
                 */
                200: MetadataPublic;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/metadata/all': {
        get: {
            req: GetMetadataData;
            res: {
                /**
                 * Successful Response
                 */
                200: MetadataCollection;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/metadata/{id}': {
        put: {
            req: UpdateMetadataData;
            res: {
                /**
                 * Successful Response
                 */
                200: MetadataPublic;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: DeleteMetadataData;
            res: {
                /**
                 * Successful Response
                 */
                200: Response;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/media-items/': {
        get: {
            req: GetMediaItemsData;
            res: {
                /**
                 * Successful Response
                 */
                200: MediaItemCollection;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        post: {
            req: CreateMediaItemData;
            res: {
                /**
                 * Successful Response
                 */
                200: MediaItemInDB;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/media-items/watches': {
        get: {
            req: GetWatchedMediaItemsData;
            res: {
                /**
                 * Successful Response
                 */
                200: MediaItemCollection;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/media-items/{media_id}': {
        get: {
            req: GetMediaItemData;
            res: {
                /**
                 * Successful Response
                 */
                200: MediaItemInDB;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        put: {
            req: UpdateMediaItemData;
            res: {
                /**
                 * Successful Response
                 */
                200: MediaItemInDB;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: DeleteMediaItemData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/tools/importnfo': {
        post: {
            req: RunImportNfoData;
            res: {
                /**
                 * Successful Response
                 */
                200: TaskStatus;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/tools/embyscan': {
        get: {
            req: RunEmbyScanData;
            res: {
                /**
                 * Successful Response
                 */
                200: TaskStatus;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/settings/proxy': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: ProxySettings;
            };
        };
        post: {
            req: UpdateProxySettingsData;
            res: {
                /**
                 * Successful Response
                 */
                200: Response;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/settings/emby': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: EmbySettings;
            };
        };
        post: {
            req: UpdateEmbySettingsData;
            res: {
                /**
                 * Successful Response
                 */
                200: Response;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/settings/emby/test': {
        post: {
            req: TestEmbyConnectionData;
            res: {
                /**
                 * Successful Response
                 */
                200: Response;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/settings/jellyfin': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: JellyfinSettings;
            };
        };
        post: {
            req: UpdateJellyfinSettingsData;
            res: {
                /**
                 * Successful Response
                 */
                200: Response;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/settings/jellyfin/test': {
        post: {
            req: TestJellyfinConnectionData;
            res: {
                /**
                 * Successful Response
                 */
                200: Response;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/resource/image': {
        get: {
            req: GetImageByQueryData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/resource/upload/image': {
        post: {
            req: UploadImageData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/files/list': {
        get: {
            req: ListDirectoryData;
            res: {
                /**
                 * Successful Response
                 */
                200: FileListResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
};